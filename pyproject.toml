[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pyjunk"
version = "0.1.0"
description = "An AI Engineering system project"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
azure-ai-projects = "^1.0.0"
azure-ai-agents = ">=1.2.0b2"
azure-identity = "^1.25.0"
pydantic-settings = "^2.10.1"
opentelemetry-sdk = "^1.37.0"
azure-core-tracing-opentelemetry = "^1.0.0b12"
opentelemetry-api = "^1.37.0"
openai = "^1.109.0"
autogen-agentchat = "^0.7.4"
autogen-ext = {extras = ["mcp"], version = "^0.7.4"}
tiktoken = "^0.11.0"
mcp-server-fetch = "^2025.4.7"
pydantic = "^2.11.9"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.6"
mypy = "^1.8.0"
ipykernel = "^6.29.5"
python-dotenv = "^1.1.0"
pytest = "^8.4.0"
pytest-asyncio = "^1.0.0"
pytest-cov = "^6.1.1"

# Ruff configuration - linting and formatting
[tool.ruff]
line-length = 240
target-version = "py312"
show-fixes = true
src = ["src/"]

[tool.ruff.lint]
select = [
    "B0",     # bugbear
    "E",      # default
    "F",      # default
    "UP",     # pyupgrade
    "RUF100", # valid noqa annotations
    "C90",    # mccabe complexity
    "N",      # pep8-naming
    "W",      # pycodestyle warnings
    "S",      # bandit security
    "T20",    # flake8-print
    "PIE",    # flake8-pie
    "I",      # isort import sorting
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"] # Allow asserts in tests

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.isort]
force-single-line = false
force-sort-within-sections = true
lines-between-types = 1
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Test configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    #"--cov-fail-under=80"
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_untyped_defs = false  # Set to true for stricter typing
no_implicit_optional = true
strict_optional = true

